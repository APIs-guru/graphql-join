// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
type Bar {
  bar: Baz
  one: String
  two: String
}

type Baz {
  baz: String
}

type Query {
  foo: Bar
}
`;

exports[`type system cross aliased fields in client query 1`] = `
{
  foo {
    ___a___typename: bar {
      baz
    }
    ___a_one: two
    ___a_two: one
  }
}
`;

exports[`type system cross aliased fields in client query 2`] = `
[
  "\\n      {\\n        foo {\\n          bar: __typename,\\n          __typename: bar { baz }\\n          one: two\\n          two: one\\n        }\\n      }\\n    ",
  {
    "data": {
      "foo": {
        "bar": "Bar",
        "__typename": {
          "baz": "test::Baz::baz"
        },
        "one": "test::Bar::two",
        "two": "test::Bar::one"
      }
    },
    "errors": []
  }
]
`;

exports[`type system duplicate fields in client query 1`] = `
{
  foo {
    bar {
      baz
    }
  }
}
`;

exports[`type system duplicate fields in client query 2`] = `
[
  "\\n      {\\n        foo {\\n          __typename\\n        }\\n        foo {\\n          bar {\\n            baz\\n          }\\n        }\\n      }\\n    ",
  {
    "data": {
      "foo": {
        "__typename": "Bar",
        "bar": {
          "baz": "test::Baz::baz"
        }
      }
    },
    "errors": []
  }
]
`;

exports[`type system field alias in client query 1`] = `
{
  foo {
    ___a_barAlias: bar {
      ___a_bazAlias: baz
    }
  }
}
`;

exports[`type system field alias in client query 2`] = `
[
  "\\n      {\\n        fooAlias: foo {\\n          barAlias: bar {\\n            bazAlias: baz\\n          }\\n        }\\n      }\\n    ",
  {
    "data": {
      "fooAlias": {
        "barAlias": {
          "bazAlias": "test::Baz::baz"
        }
      }
    },
    "errors": []
  }
]
`;

exports[`type system fragments in client query 1`] = `
{
  foo {
    ... on Bar {
      bar {
        ... on Baz {
          baz
        }
      }
    }
  }
}
`;

exports[`type system fragments in client query 2`] = `
[
  "\\n      {\\n        ... FooFrag\\n      }\\n      fragment FooFrag on Query {\\n        foo {\\n          ... BarFrag\\n        }\\n      }\\n      fragment BarFrag on Bar {\\n        bar {\\n          ... BazFrag\\n        }\\n      }\\n      fragment BazFrag on Baz {\\n        baz\\n      }\\n    ",
  {
    "data": {
      "foo": {
        "bar": {
          "baz": "test::Baz::baz"
        }
      }
    },
    "errors": []
  }
]
`;

exports[`type system variables in client query 1`] = `
{
  foo {
    bar @skip(if: false) {
      baz @include(if: true)
    }
  }
}
`;

exports[`type system variables in client query 2`] = `
[
  "\\n      query ($true: Boolean = true, $false: Boolean = false) {\\n        foo @include(if: $true) {\\n          bar @skip(if: $false) {\\n            baz @include(if: $true)\\n          }\\n        }\\n      }\\n    ",
  {
    "data": {
      "foo": {
        "bar": {
          "baz": "test::Baz::baz"
        }
      }
    },
    "errors": []
  }
]
`;
