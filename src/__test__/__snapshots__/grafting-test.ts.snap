// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`grafting tests extend Query type 1`] = `
type Bar {
  baz: String
}

type Query {
  foo: String
  bar: Bar
}
`;

exports[`grafting tests extend Query type 2`] = `
{
  foo
}
`;

exports[`grafting tests extend Query type 3`] = `
[
  "{ foo }",
  {
    "data": {
      "foo": "test1::Query::foo"
    },
    "errors": []
  }
]
`;

exports[`grafting tests extend Query type 4`] = `
{
  bar {
    baz
  }
}
`;

exports[`grafting tests extend Query type 5`] = `
[
  "{ bar { baz } }",
  {
    "data": {
      "bar": {
        "baz": "test2::Bar::baz"
      }
    },
    "errors": []
  }
]
`;

exports[`grafting tests extend Query type 6`] = `
{
  foo
}
`;

exports[`grafting tests extend Query type 7`] = `
{
  bar {
    baz
  }
}
`;

exports[`grafting tests extend Query type 8`] = `
[
  "{ foo bar { baz } }",
  {
    "data": {
      "foo": "test1::Query::foo",
      "bar": {
        "baz": "test2::Bar::baz"
      }
    },
    "errors": []
  }
]
`;

exports[`grafting tests recursive Query type 1`] = `
type Query {
  query: Query
  foo: String
}
`;

exports[`grafting tests recursive Query type 2`] = `
{
  foo
}
`;

exports[`grafting tests recursive Query type 3`] = `
[
  "{ foo }",
  {
    "data": {
      "foo": "test::Query::foo"
    },
    "errors": []
  }
]
`;

exports[`grafting tests recursive Query type 4`] = `
{
  query {
    foo
  }
}
`;

exports[`grafting tests recursive Query type 5`] = `
[
  "{ query { foo } }",
  {
    "data": {
      "query": {
        "foo": "test::Query::foo"
      }
    },
    "errors": []
  }
]
`;

exports[`grafting tests recursive extend 1`] = `
type Bar {
  barValue: String
  foo: Foo
}

type Foo {
  fooValue: String
  bar: Bar
}

type Query {
  foo: Foo
}
`;

exports[`grafting tests recursive extend 2`] = `
{
  foo {
    fooValue
  }
}
`;

exports[`grafting tests recursive extend 3`] = `
[
  "{ foo { fooValue } }",
  {
    "data": {
      "foo": {
        "fooValue": "test1::Foo::fooValue"
      }
    },
    "errors": []
  }
]
`;

exports[`grafting tests recursive extend 4`] = `
{
  foo {
    fooValue
  }
}
`;

exports[`grafting tests recursive extend 5`] = `
{
  bar {
    barValue
  }
}
`;

exports[`grafting tests recursive extend 6`] = `
{
  foo {
    fooValue
  }
}
`;

exports[`grafting tests recursive extend 7`] = `
{
  bar {
    barValue
  }
}
`;

exports[`grafting tests recursive extend 8`] = `
[
  "\\n      {\\n        foo {\\n          fooValue\\n          bar {\\n            barValue\\n            foo {\\n              fooValue\\n              bar {\\n                barValue\\n              }\\n            }\\n          }\\n        }\\n      }\\n    ",
  {
    "data": {
      "foo": {
        "fooValue": "test1::Foo::fooValue",
        "bar": {
          "barValue": "test2::Bar::barValue",
          "foo": {
            "fooValue": "test1::Foo::fooValue",
            "bar": {
              "barValue": "test2::Bar::barValue"
            }
          }
        }
      }
    },
    "errors": []
  }
]
`;
